/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJ     3

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    macros {
        forty_two: forty_two {
            label = "ZM_forty_two";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp N4>
                , <&macro_tap &kp N2>
                ;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                &kp GRAVE    &kp N1     &kp N2    &kp N3    &kp N4     &kp N5                           &kp N6     &kp N7     &kp N8     &kp N9    &kp N0     &kp BSPC
                &kp TAB      &kp Q      &kp W     &kp E     &kp R      &kp T                            &kp Y      &kp U      &kp I      &kp O     &kp P      &kp BSLH
                &kp LCTRL    &kp A      &kp S     &kp D     &kp F      &kp G          &kp ESC           &kp H      &kp J      &kp K      &kp L     &kp SEMI   &kp SQT
                &kp LSHIFT   &kp Z      &kp X     &kp C     &kp V      &kp B                            &kp N      &kp M      &kp COMMA  &kp DOT   &kp SLASH  &kp RET
                                                  &kp LALT  &kp LGUI   &kp SPACE  &mo LOWER  &mo RAISE  &kp SPACE  &kp MINUS  &kp EQUAL
                >;
        };
        lower {
            bindings = <
                &kp LS(GRAVE)  &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)                            &kp LS(N6)    &kp LS(N7)   &kp LS(N8) &kp LS(N9)  &kp LS(N0)  &kp BSPC
                &kp TAB        &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)                            &kp LS(N6)    &kp HOME     &kp END  &kp LS(N9)    &kp LS(N0)  &kp BSLH
                &kp LCTRL      &kp F7      &kp F8      &kp F9      &kp F10     &kp F11               &kp C_PLAY      &kp F12       &kp PG_UP    &kp PG_DN  &kp LBKT    &kp RBKT    &kp SQT
                &kp LSHIFT     &kp F1      &kp F2      &kp F3      &kp F4      &kp F5                                &kp F6        &kp PG_DN    &kp LBKT   &kp RBKT    &kp END     &kp RET
                                                       &none       &none       &none       &mo LOWER  &mo RAISE      &kp C_VOL_DN  &kp C_VOL_UP &kp C_NEXT
                >;
        };
        raise {
            bindings = <
                &kp GRAVE  &kp N1    &kp N2    &kp N3     &kp N4    &kp N5                           &kp N6       &kp N7           &kp N8           &kp N9          &kp N0          &kp BSPC
                &kp TAB    &none     &kp UP    &none      &none     &none                            &none        &rgb_ug RGB_EFR  &none            &none           &kp none        &kp BSLH
                &kp LCTRL  &kp LEFT  &kp DOWN  &kp RIGHT  &none     &none            &kp CAPS        &kp F6       &rgb_ug RGB_EFF  &rgb_ug RGB_HUI  &rgb_ug RGB_HUD &rgb_ug RGB_SAI &rgb_ug RGB_SAD
                &kp LSHIFT &kp F7    &kp F8    &kp F9     &kp F10   &kp F11                          &kp F12      &rgb_ug RGB_TOG  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD &rgb_ug RGB_SPI &rgb_ug RGB_SPD
                                               &trans     &trans    &trans     &mo LOWER  &mo RAISE  &kp C_VOL_DN &kp C_VOL_UP     &kp C_NEXT
                >;
        };
        adj {
            bindings = <
                &bootloader  &kp N1       &kp N2       &kp N3       &kp N4       &kp N5                           &kp N6     &kp N7     &kp N8     &kp N9    &kp N0     &kp BSPC
                &bt BT_CLR   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                     &kp Y      &kp U      &kp I      &kp O     &kp P      &kp DEL
                &out OUT_TOG &kp A        &kp S        &kp D        &kp F        &kp G          &forty_two        &kp H      &kp J      &kp K      &kp L     &kp SEMI   &kp SQT
                &kp LSHIFT   &kp Z        &kp X        &kp C        &kp V        &kp B                            &kp N      &kp M      &kp COMMA  &kp DOT   &kp SLASH  &mt RSHIFT RET
                                                  &kp LALT  &trans     &kp SPACE  &rgb_ug RGB_EFR &rgb_ug RGB_EFF &kp SPACE  &trans     &kp K_CMENU
                >;
        };
    };
};
